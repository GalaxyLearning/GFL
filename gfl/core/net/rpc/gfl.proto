syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "gfl/core/data.proto";

package gfl.core.net.rpc;

message ComputingPower {
  int32 cpu_utilization = 1;
  int32 cpu_cores = 2;
  int32 memory_used = 3;
  int32 memory_total = 4;
  int32 gpu_memory_used = 5;
  int32 gpu_memory_total = 6;
}

message Health {
  int32 running_job_count = 1;
  ComputingPower power = 2;
}

message JobMetaList {
  repeated JobMeta metas = 1;
}

message DatasetMetaList {
  repeated DatasetMeta metas = 1;
}

message JobJoinRequest {
  string job_id = 1;
  string node_id = 2;
  string dataset_id = 3;
}

message ParamsFetchRequest {
  string job_id = 1;
  string node_id = 2;
  int32 step = 3;
}

service Gfl {

  rpc SendNodeInfo(gfl.core.NodeInfo) returns (google.protobuf.BoolValue);

  rpc GetPubKey(google.protobuf.StringValue) returns (google.protobuf.StringValue);

  rpc SendHealth(Health) returns (google.protobuf.BoolValue);

  rpc GetNetComputingPower(google.protobuf.Empty) returns(ComputingPower);

  rpc GetJobComputingPower(google.protobuf.StringValue) returns(ComputingPower);

  rpc FetchJobMetas(google.protobuf.Int32Value) returns(JobMetaList);

  rpc FetchJob(google.protobuf.StringValue) returns(gfl.core.JobData);

  rpc PushJob(gfl.core.JobData) returns(google.protobuf.BoolValue);

  rpc JoinJob(JobJoinRequest) returns(google.protobuf.BoolValue);

  rpc FetchDatasetMetas(google.protobuf.Empty) returns(DatasetMetaList);

  rpc FetchDataset(google.protobuf.StringValue) returns(gfl.core.DatasetData);

  rpc PushDataset(gfl.core.DatasetData) returns(google.protobuf.BoolValue);

  rpc FetchParams(ParamsFetchRequest) returns(ModelParams);

  rpc PushParams(ModelParams) returns(google.protobuf.BoolValue);

}
